var globalTripMap;

var app = angular.module('trackmilesApp', ['trackmilesFilters']);

app.controller('TripLogController', ['$scope', '$http', '$filter', function($scope, $http, $filter) {
    var tripLog = this;
    globalTripLog = this;

    $scope.tripDates = [];
    $scope.tripsByDate = {};
    $scope.placesById = {};
    $scope.activeStart = {};
    $scope.activeEnd = {};

    this.map = new L.Map('map');
    var osmUrl='http://otile2.mqcdn.com/tiles/1.0.0/map/{z}/{x}/{y}.jpg';
    var osmAttrib='Tiles by <a href="http://www.mapquest.com/">MapQuest</a> &mdash; Map data &copy; <a href="http://openstreetmap.org">OpenStreetMap</a> contributors, <a href="http://creativecommons.org/licenses/by-sa/2.0/">CC-BY-SA</a>';
    var osm = new L.TileLayer(osmUrl, {minZoom: 1, maxZoom: 16, attribution: osmAttrib});
    this.map.setView(new L.LatLng(39.833333, -98.583333), 3);
    this.map.addLayer(osm);
    this.tripLayers = [];

    this.popupOffset = new L.Point(1,-34);
    this.markerIcon = L.icon({
        iconUrl: '<%= asset_path('marker-icon.png') %>',
        iconRetinaUrl: '<%= asset_path('marker-icon-2x.png') %>',
        shadowUrl: '<%= asset_path('marker-shadow.png') %>',
        iconSize: [25, 41],
        iconAnchor: [12, 41],
        popupAnchor: [this.popupOffset.x, this.popupOffset.y],
        shadowSize: [41, 41]
    });

    $http.get('/trips.json').success(function (data) {
        var trips = data.trips;
        var tripsByDate = {};
        var tripDates = [];
        for (var i = 0; i < trips.length; i++) {
            var date = $filter('date')(trips[i]['start_time'], 'EEE M/d/yy');
            if (date in tripsByDate) {
                tripsByDate[date].push(trips[i]);
            } else {
                tripsByDate[date] = [trips[i]];
                tripDates.push(date);
            }
        }
        tripDates = tripDates.sort(function(a,b) {return new Date(b) - new Date(a)});

        var placesById = {};
        var places = data.places;
        for (var i = 0; i < places.length; i++) {
            placesById[places[i].id] = places[i];
        }

        $scope.tripDates = tripDates;
        $scope.tripsByDate = tripsByDate;
        $scope.placesById = placesById;
    });

    this.showMapStart = function(trip) {
        this.showTrip(trip, true);
    };
    this.showMapEnd = function(trip) {
        this.showTrip(trip, false);
    };

    this.clearTripLayers = function() {
        for (var i = 0; i < this.tripLayers.length; i++) {
            this.map.removeLayer(this.tripLayers[i]);
        }
    };

    this.addTripLayer = function(layer) {
        this.map.addLayer(layer);
        this.tripLayers.push(layer);
    };

    this.showTrip = function(trip, focusOnStart) {
        var start = $scope.placesById[trip.start_place_id];
        var end = $scope.placesById[trip.end_place_id];
        $scope.activeStart = start;
        $scope.activeEnd = end;

        this.clearTripLayers();

        var startMarker = L.marker([start.latitude, start.longitude],
                {icon: this.markerIcon, title: start.summary})
                .setPopupContent(start.summary);
        this.addTripLayer(startMarker);

        var startPopup = L.popup({closeButton: false, offset: this.popupOffset})
            .setContent('<b>From</b> ' + start.summary.replace(',','<br>'))
            .setLatLng(new L.LatLng(start.latitude, start.longitude))
        this.addTripLayer(startPopup);

        var endMarker = L.marker([end.latitude, end.longitude],
                {icon: this.markerIcon, title: end.summary});
        this.addTripLayer(endMarker);

        var endPopup = L.popup({closeButton: false, offset: this.popupOffset})
                .setContent('<b>To</b> ' + end.summary.replace(',','<br>'))
                .setLatLng(new L.LatLng(end.latitude, end.longitude))
        this.addTripLayer(endPopup);

        this.map.fitBounds(
            [[start.latitude, start.longitude],[end.latitude, end.longitude]],
            {paddingTopLeft: new L.Point(20, 120),
             paddingBottomRight: new L.Point(5,30)});

        this.showWaypoints(trip);
    };

    this.placePartialAddress = function(place, prevPlace) {
        var addr = place.street;
        if (place.state != prevPlace.state) {
            addr += ', ' + place.city + ', ' + place.state;
        } else if (place.city != prevPlace.city) {
            addr += ', ' + place.city
        }
        return addr;
    };

    this.formatDistance = function(km) {
        var miles = km / 1.60934;
        if (miles < 10.0) {
            miles = $filter('number')(miles, 1);
        } else {
            miles = $filter('number')(miles, 0);
        }
        return miles + 'mi';
    };

    this.showWaypoints = function(trip) {
        var start = $scope.placesById[trip.start_place_id];
        var end = $scope.placesById[trip.end_place_id];

        params = {
            trip_id: trip.id,
            map_width: this.map.getSize().x,
            map_height: this.map.getSize().y,
            map_zoom: this.map.getZoom(),
            map_lat: this.map.getCenter().lat,
            map_lng: this.map.getCenter().lng
        };

        $http.get('/waypoints.json', {params: params}).success(function (data) {
            var points = [];

            points.push(new L.LatLng(start.latitude, start.longitude))

            for (var i = 0; i < data.length; i++) {
                points.push(new L.LatLng(data[i][0], data[i][1]));
            }
            points.push(new L.LatLng(end.latitude, end.longitude))

            // Add the start and end points to the list

            var line = L.polyline(points);
            tripLog.addTripLayer(line);
        });
    };
}]);

angular.module('trackmilesFilters', []).filter('cutright', function() {
    return function(input, len) {
        return input.substring(0, input.length - len);
    };
});